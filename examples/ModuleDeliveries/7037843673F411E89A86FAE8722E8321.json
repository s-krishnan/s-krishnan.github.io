{"Response":{"Module":{"ModuleCode":"COMP0005","ModuleIdentifier":"7037843673F411E89A86FAE8722E8321","ModuleTitle":"Algorithms","ModuleContact":{"Faculty":{"FacultyCode":"ENG","FacultyName":"Faculty of Engineering Sciences"},"Department":{"DepartmentCode":"COMPS_ENG","DepartmentName":"Computer Science"}},"ModuleValue":"15","ModuleStudyHours":"150","ModuleLearningHours":"30","ModuleSearchKeywords":"ALGORITHMS, PROBLEM SOLVING","Email":"cs.undergraduate@ucl.ac.uk","ModuleSuperGroup":"","CEFRLevel":"","ModuleInstance":{"AcademicYearCode":"2019","AcademicYearDescription":"2019/20 academic  year","ModuleInstanceDescription":"<p>\n\t<strong>Aims:</strong><br />\n\tTo develop programming and problem solving skills, to encourage a thoughtful approach to analysis and design problems, to familiarise students with logical and mathematical inference and argumentation.<br />\n\t<br />\n\t<strong>Learning outcomes:</strong><br />\n\tOn successful completion of the module, a student will be able to: apply this knowledge to specification of algorithms and logic programming.<br />\n\t<br />\n\t<strong>Content:</strong><br />\n\tSearching and sorting algorithms:<br />\n\t-Elementary searching (Linear and binary search);<br />\n\t-Binary search trees;<br />\n\t-Hash Tables, Hashing, Hash functions;</p>\n<p>\n\tGraph algorithms:<br />\n\t-Directed acyclic graphs;<br />\n\t-PERTchart;<br />\n\t-Dijkstra&rsquo;s algorithm;<br />\n\t-Bellman-Ford algorithm;<br />\n\t-Floyd-Warshall algorithm;</p>\n<p>\n\tText algorithms:<br />\n\t-String matching;<br />\n\t-Longest Common Sequence;<br />\n\t-Sequence/subsequence;</p>\n<p>\n\tAnalysis of algorithms:<br />\n\t-Algorithmic complexity;<br />\n\t-Upper and lower bounds;<br />\n\t-O notation;<br />\n\t-Best, worst and average cases;<br />\n\t-Classifications of algorithms;</p>\n<p>\n\tLinked Lists:<br />\n\t-Linked structures;<br />\n\t-Singly-linked list, Doubly-linked list;<br />\n\t-Circular linked list;</p>\n<p>\n\tAbstract Data Types:<br />\n\t-ADTs;<br />\n\t-Defining the ADT;<br />\n\t-Implementing the ADT;<br />\n\t-Bag ADT;<br />\n\t-List-based Implementation;<br />\n\t-Queue ADT;</p>\n<p>\n\tDynamic Programming:<br />\n\t-Elements of dynamic programming;<br />\n\t-Rod cutting;<br />\n\t-Matrix-chain multiplication;<br />\n\t-Optimal binary search trees;</p>\n<p>\n\tRecursion:<br />\n\t-Properties;<br />\n\t-Run time stack, tail recursion;<br />\n\t-Recursive applications, recursive binary search, exponential operation;</p>\n<p>\n\tAnalysis of searching and sorting algorithms:<br />\n\t-Binary search;<br />\n\t-Selection sort, Insertion sort, mergesort, quicksort, radix sort;<br />\n\t-Bubble sort, lower bounds for sorting;<br />\n\t-Working with sorted lists;<br />\n\t-Heapsort, building a heap, heapsort algorithm, priority queues;</p>\n<p>\n\tGreedy Algorithms:<br />\n\t-Elements of greedy strategy;<br />\n\t-Huffman codes;<br />\n\t-Matroids;<br />\n\t<br />\n\t<strong>Requisites:</strong><br />\n\tIn order to be eligible to select this module, a student must Â¿be registered on a programme for which it is a formally-approved option or elective choice AND must have taken in Term 1 Theory of Computation (COMP0003).</p>\n","ModuleInstanceRestriction":"This module is restricted to students registered on:\nBSc Computer Science\nMEng Computer Science \nMEng Mathematical Computation\nBSc Security and Crime Science\nBASc Science and Engineering\n","ModuleInstanceSubjectCollection":{"ModuleInstanceSubject":"Computer Science"},"ModuleDeliveryCollection":{"ModuleDelivery":{"ModuleDeliveryIdentifier":"70458EE673F411E89A86FAE8722E8321","LevelOfStudy":"Undergraduate","ModuleDeliveryPeriod":{"PeriodCode":"T2","PeriodTitle":"Term 2"},"AcademicLevel":{"AcademicLevelCode":"L4","AcademicLevelTitle":"FHEQ Level 4"},"ModuleDeliveryType":"","ModeOfStudy":"Face-to-face","ModuleDeliveryTutor":{"PersonIdentifier":"IYASI22","Name":"Ifat Yasin","Email":""},"PreviousYearStudentCount":"165","NumberOfStudents":"165","ModuleDeliveryLocation":{"LocationIdentifier":"","LocationName":""},"ModuleDeliveryAssessment":{"AssessmentGroupCollection":{"@DefaultAssessmentGroup":"NULL","AssessmentGroup":[{"AssessmentGroupCode":"NULL","AssessmentGroupName":"","AssessmentComponentList":{"AssessmentComponent":[{"AssessmentComponentTitle":"Coursework two (1,800 words)","AssessmentComponentWeightPercentage":"35"},{"AssessmentComponentTitle":"Coursework three","AssessmentComponentWeightPercentage":"15"},{"AssessmentComponentTitle":"Coursework one (3,000 words)","AssessmentComponentWeightPercentage":"50"}]}},{"AssessmentGroupCode":"A","AssessmentGroupName":"","AssessmentComponentList":{"AssessmentComponent":[{"AssessmentComponentTitle":"Coursework three","AssessmentComponentWeightPercentage":"15"},{"AssessmentComponentTitle":"Coursework two (1,800 words)","AssessmentComponentWeightPercentage":"35"},{"AssessmentComponentTitle":"Coursework one (3,000 words)","AssessmentComponentWeightPercentage":"50"}]}}]}}}}}}}}