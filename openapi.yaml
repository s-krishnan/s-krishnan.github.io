---
openapi: 3.0.2
# Added by API Auto Mocking Plugin
servers:
  - description:  Production
    url: http://localhost:8002
  - description:  UAT
    url: http://localhost:8002
  - description:   Performance Test
    url: http://localhost:8002 
info:
  #description: This is a UCL enterprise api for module catalogue
  description: "# Introduction\nWelcome to the reference for the UCL Academic REST API!\
    \n<a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a>\
    \ is a web-service protocol that lends itself to rapid development by using everyday\
    \ HTTP and JSON, XML technology.\n\nThe UCL Academic REST API provides a broad set of operations\
    \ and resources that:\n\n  * Enable Web integration from the website.\n\
    \  * Support self-service subscriber sign-ups and account management (future).\n  * Enable manipulation\
    \ of most objects in the Academic Object Model.\n\nWant to share your opinion on\
    \ how our API works for you? <a href=\"_self\"\
    \ target=\"_blank\">Tell us how you feel </a>about using our API and what we can\
    \ do to make it better.\n\n## Access to the API\n\n
    \ You can access the UCL Academic REST API via one of the following endpoints:\n\n| Environment\
    \              | Base URL for REST Endpoints |\n|-------------------------|-------------------------|\n\
    |Production | TBC   |\n|UAT    | TBC|\n\
    |Performance Test | TBC |\n\nThe Production endpoint\
    \ provides access to the live data. UAT tenants are a good place\
    \ to test code without affecting real-world data. If you would like UCL to provision\
    \ an UAT tenant for you, contact API service owner for assistance.\n\
    \n\n# API Changelog\nYou can find the <a\
    \ href=\"_self\"\
    \ target=\"_blank\">Changelog</a> of the API Reference in the API wiki page.\n\
    \n# Authentication\n\n## OAuth v2.0\n\nAPI team recommends that you use OAuth v2.0\
    \ to authenticate to the UCL Academic REST API. Currently, OAuth is not available.\
    \ See [API Wiki](TBC)\
    \ for more information.\n\nAPI team recommends you to create a dedicated API user\
    \ with API write access on a tenant when authenticating via OAuth, and then create\
    \ an OAuth client for this user. See <a href=\"_self\"\
    \ target=\"_blank\">Create an API User</a> for how to do this. By creating a dedicated\
    \ API user, you can control permissions of the API user without affecting other\
    \ non-API users.\n\nIf a user is deactivated, all of the user's OAuth clients\
    \ will be automatically deactivated.\n\nAuthenticating via OAuth requires the\
    \ following steps:\n1. Create a Client\n2. Generate a Token\n3. Make Authenticated\
    \ Requests\n\n### Create a Client\n\nYou must first [create an OAuth client](TBC)\
    \ in the UI (TBC). To do this, you must be an administrator.\
    \ This is a one-time operation. You will be provided with a Client ID and a Client\
    \ Secret. Please note this information down, as it will be required for the next\
    \ step.\n\n**Note:** The OAuth client will be owned by a user account used to login to create client id in first place. If\
    \ you want to perform PUT, POST, or DELETE operations using the OAuth client,\
    \ the owner of the OAuth client must have a Platform role that includes the \"\
    API Write Access\" permission.\n\n### Generate a Token\n\nAfter creating a client,\
    \ you must make a call to obtain a bearer token using the [Generate an OAuth token](TBC)\
    \ operation. This operation requires the following parameters:\n- `client_id`\
    \ - the Client ID displayed when you created the OAuth client in the previous\
    \ step\n- `client_secret` - the Client Secret displayed when you created the OAuth\
    \ client in the previous step\n- `grant_type` - must be set to `client_credentials`\n\
    \n**Note**: The Client ID and Client Secret mentioned above were displayed when\
    \ you created the OAuth Client in the prior step. The [Generate an OAuth token](TBC)\
    \ response specifies how long the bearer token is valid for. Call [Generate an\
    \ OAuth token](TBC)\
    \ again to generate a new bearer token.\n\n### Make Authenticated Requests\n\n\
    To authenticate subsequent API requests, you must provide a valid bearer token\
    \ in an HTTP header:\n\n`Authorization: Bearer {bearer_token}`\n\n##\
    \ Other Supported Authentication Schemes\n\nAPI team continues to support the following\
    \ additional legacy means of authentication:\n\n  * Use username and password.\
    \ Include authentication with each request in the header: \n  \n    * `apiAccessKeyId`\
    \ \n    * `apiSecretAccessKey`\n    \n    API team recommends that you create an\
    \ API user specifically for making API calls. See <a href=\_self\"\
    \ target=\"_blank\">Create an API User</a> for more information.\n  \n  * Use\
    \ an authorization cookie. The cookie authorizes the user to make calls to the\
    \ REST API for the duration specified in  **Administration > Security Policies\
    \ > Session timeout**. The cookie expiration time is reset with this duration\
    \ after every call to the REST API. To obtain a cookie, call the [Connections](TBC)\
    \ resource with the following API user information: \n  \n    *   ID    \n   \
    \ *   Password\n\n# Requests and Responses\n\n## BDO IDs \nAs a general rule, pass\
    \ BDOid to select / update / delete single resource in academic REST APIs 
    \ \n\n## HTTP Request Body\n\nMost of the parameters\
    \ and data accompanying your requests will be contained in the body of the HTTP\
    \ request. \n\nThe UCL Academic REST API accepts JSON, XML in the HTTP request body. No other\
    \ data format (e.g., SOAP, RSS, TEXT) is supported.\n\n### Data Type\n\n\
    \ (CRUD operations only) We recommend that you do not specify the decimal values\
    \ with quotation marks, commas, and spaces. Use characters of `+-0-9.eE`, for\
    \ example, `5`, `1.9`, `-8.469`, and `7.7e2`. Also, year in four digits 'YYYY' where applicable such as academicyearcode.\
    \ \n\n## Testing a Request\n\nUse a third party client, such\
    \ as [curl](https://curl.haxx.se \"curl\"), [Postman](https://www.getpostman.com\
    \ \"Postman\"), or [Advanced REST Client](https://advancedrestclient.com \"Advanced\
    \ REST Client\"), to test the UCL Academic REST API.\n\nYou can test the UCL Academic REST API\
    \ for any enviornment as long as you have sufficient access. If connecting to Production,\
    \ bear in mind that you are working with your live production data, not sample\
    \ data or test data.\n\n
    \ Timeout Limit\n\nIf a request does not complete within 120 seconds, the request\
    \ times out and API platform returns a Gateway Timeout error.\n\n## Error Handling\n\n\
    Responses and error codes are detailed in [Responses and errors](TBC\
    \ \"Responses and errors\").
        
    \ \n\n# API Rate Limits\n\nAPI platform enforces client-level, Rate limiting of the standard API is primarily on a \
    \ per-user basis — or more accurately described, per user access token. If a method allows for X requests per rate limit  \
    \ window, then it allows X requests per window per access token. \
    \ \n See below for more information.\n ##  HTTP Headers and Response Codes \n\
    \ Use the HTTP headers in order to understand where the application is at for a given rate limit, \
    \ on the method that was just utilized. \n \
    \ *	`x-rate-limit-limit:`  the rate limit ceiling for that given endpoint, indicates how many calls \
    \ your application may make per time window. This time window is currently 60 seconds for most the resources, \
    \ but for the most reliable code you should not assume this is the case - use the X-Rate-Limit-Reset header instead. \n \
    \ *   `x-rate-limit-remaining:`  the number of requests left for the current time window \n \
    \ *   `x-rate-limit-reset:`  the remaining window before the rate limit resets, in UTC \n \
    \ [epoch seconds](http://en.wikipedia.org/wiki/Unix_time) \n \
    \ When an application exceeds the rate limit for a given API endpoint, the API will return a  \
    \ [HTTP 429 “Too Many Requests”](http://tools.ietf.org/html/rfc6585)  response code, \ 
    \ and the following error will be returned in the response body \n \
    \ '{ \"errors\": [ { \"code\": 88, \"message\": \"Rate limit exceeded\" } ] }' \n \
    \ and the following response header \
    \ `Retry-After: `the remaining window before the rate limit resets, in UTC  [epoch seconds](http://en.wikipedia.org/wiki/Unix_time)
    \ \n\n ##  Concurrent Request Limits \n\n ### ModuleCatalogue API \
    \ \n Number of simultaneous request accepted by API from single clinet for the selected resource at any given time in ms. /
    \ \n\n| Tenant              | GET| PUT | DELETE | POST | \n \
    \ |-------------------------|----| ----| -------| -----| \n \
    \ |Drupal                   | 1  | N/A | N/A | N/A |\n \
    \ \n\n ##  Request Limits \n\n ### ModuleCatalogue API \
    \ \n Total number of request accepted by API from single clinet for the selected resource in 24 Hours. \
    \ \n\n| Tenant              | GET| PUT | DELETE | POST | \n \
    \ |-------------------------|----| ----| -------| -----| \n \
    \ |Drupal                   | 20,000  | N/A | N/A | N/A |\n \
    \ \n\n# Pagination\n\nWhen retrieving information (using\
    \ GET methods), the optional `$skip` and '$limit' query parameters sets the stating record and maximum number\
    \ of record to return in a response. The maximum is `10`; larger values are treated\
    \ as `10`. If this value is empty or invalid, '$skip' typically defaults to\
    \ `0` and '$limit' defaults to 10.\n\nThe default value for the maximum number of rows retrieved can be overridden\
    \ at the method level.\n\nIf more rows are available, the response will include\
    \ a `nextPage` element, which contains a URL for requesting the next page, \
    \ \n\n    {
    \ \n        \"Module\":[
    \ \n          {
    \ \n            \"ModuleIdentifier\": .......
    \ \n            ......................
    \ \n          }
    \ \n        ],
    \ \n        \"links\":[
    \ \n            {
    \ \n              \"href\": \"module?$skip=20&$limit=50\",
    \ \n              \"rel\": \"nextpage\",
    \ \n              \"type\" : \"GET\"
    \ \n            }
    \ \n          ]
    \ \n       }
    \ \n\n
    \ \n\n client follow the link provided in 'nextpage' at their discretion. \
    \ Neither permissions, nor the capability to make a successful call to that link, is guaranteed solely by the existence of a relationship.  \ 
    \ If this value is not provided, no more rows are available. No \"previous page\"\
    \ element is explicitly provided; use the previous\
    \ call instead.\n\n## Array Size\n\nFor data items that are not paginated, the REST API\
    \ supports arrays of up to 50 rows. \
    \ \n\n# API Versions\n\nThe Academic REST \
    \ API are version controlled. Versioning ensures that UCL Academic REST API changes are\
    \ backward compatible. This API uses a major and minor version nomenclature to manage\
    \ changes. By specifying a version in a REST request, you can get expected responses\
    \ regardless of future changes to the API.\n\n## Major Version\n\nThe major version\
    \ number of the REST API appears in the REST URL. Currently, Academic API only supports\
    \ the **v1** major version. For example, `POST https://TBC/v1`.\n\
    \n## Minor Version\n\nAcademic API uses minor versions for the REST API to control small\
    \ changes. For example, a field in a REST method is deprecated and a new field\
    \ is used to replace it. \n\nSome fields in the REST methods are supported as\
    \ of minor versions. If a field is not noted with a minor version, this field\
    \ is available for all minor versions. If a field is noted with a minor version,\
    \ this field is in version control. You must specify the supported minor version\
    \ in the request header to process without an error. \n\nIf a field is in version\
    \ control, it is either with a minimum minor version or a maximum minor version,\
    \ or both of them. You can only use this field with the minor version between\
    \ the minimum and the maximum minor versions. \
    \ \n\nIf you specify a version number in the request header that is\
    \ not supported, API will use the minimum minor version of the REST API. In\
    \ our REST API documentation, if a field or feature requires a minor version number,\
    \ we note that in the field description.\n\nYou only need to specify the version\
    \ number when you use the fields require a minor version. To specify the minor\
    \ version, set the `minor-version` parameter to the minor version number in the\
    \ request header for the request call.\
    \ The `minor-version` parameter is case sensitive.\n\nFor all the REST API fields,\
    \ by default, if the minor version is not specified in the request header, API\
    \ will use the minimum minor version of the REST API to avoid breaking your integration.\
    \ \n\n### Minor Version History\n\nThe supported minor versions are not serial.\
    \ This section documents the changes made to each UCL Academic REST API minor version.\n\
    \nThe following table lists the supported versions and the fields that have a\
    \ UCL Academic REST API minor version.\n\n| Fields         | Minor Version      | REST\
    \ Methods    | Description |\n|:--------|:--------|:--------|:--------|\n | TBC\
    \ | TBC  | TBC|TBC|\
    \    \n\n\n# Academic Object Model\n\n### Module Catalogue Object Model\
    \ \n\nThe following diagram presents a high-level view of the Module Catalogue\
    \ objects. Click the image to open it in a new tab to resize it.\n\n<a href=\"\
    https://wiki.ucl.ac.uk/download/attachments/112330630/Target%20Solution%20-%20Information%20Architecture.png?version=2&modificationDate=1553012583000&api=v2\" target=\"_blank\"\
    ><img src=\"https://wiki.ucl.ac.uk/download/attachments/112330630/Target%20Solution%20-%20Information%20Architecture.png?version=2&modificationDate=1553012583000&api=v2\" alt=\"\
    Module Object Model Diagram\"></a>\n\nThe following table provides the API name of each Academic object:\n\
    \n| Object                                        | API Name                 \
    \                  |\n|-----------------------------------------------|--------------------------------------------|\n\
    \ | Academic Module                                       | `Module`                  |\n\
    \ |Academic Module Delivery                               | `ModuleDelivery`\
    \ \n"
  version: "2019.03.25-1820"
  title: UCL Academic API Reference
  x-logo:
    url: Images/isdi_logo_grey-trans-large.png  
  contact:
    name: saravanakumar krishnan
    email: saravanakumar.krishnan@ucl.ac.uk
  termsOfService: https://www.ucl.ac.uk/isd/services/software-hardware/help/software-policy-faqs
  license:
    name: UCLl API
    url: 'https://www.ucl.ac.uk/isd/services/software-hardware/help/software-policy-faqs'
tags:
  - name: ModuleCatalogue API
    description: Academic Module Catalogue API
paths:
  /module:
    get:
      tags:
        - ModuleCatalogue API
      summary: module instance - current year
      operationId: Module
      description: "Get the instance of the module for the current academic year."
      externalDocs:
        description: Find more info about interface design here
        url: "https://liveuclac.sharepoint.com/sites/ampteam/Shared%20Documents/Module%20Catalogue/Interface%20Specification.docx?web=1"
      parameters:
        - $ref: Domains.yaml#/components/parameters/skipParam
        - $ref: Domains.yaml#/components/parameters/limitParam
        # - $ref: Domains.yaml#/components/parameters/selectParam
        - $ref: Domains.yaml#/components/parameters/filterParam
      responses:
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/modulecataloguecontent'
        "204":
          description: No Content - Successful request but no response body. e.g requesting module filter by modulecode which doesn't exist.
        
        #Error
        #General Error Code, if none of the    others are applicable
        "400":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "401":
          description: A User authentication required or credentials unauthorised
        "403":
          description: "Forbidden; the authenticated user does not have the authorisation to access the resource."
        "404":
          description: In case two conflicting update requests are made, one of the request must return 409.
        #Two conflicting update requests are made, one of the request must return 409.
        "409":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "429":
          description: "Too Many Requests - Rate limiting applied due to number of requests."
        #An internal server error had occurred. This is an unpredictable error        
        "500":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "502":
          description: Bad Gateway

  /module/{academicyearcode}:
    get:
      tags:
        - ModuleCatalogue API
      summary: module instance - Any Year
      operationId: ModuleCatalogueFilterByYear
      description: "Get the instance of the academic module for the selected academic year."
      externalDocs:
        description: Find more info about interface design here
        url: "https://liveuclac.sharepoint.com/sites/ampteam/Shared%20Documents/Module%20Catalogue/Interface%20Specification.docx?web=1"
      parameters:
        - $ref: Domains.yaml#/components/parameters/skipParam
        - $ref: Domains.yaml#/components/parameters/limitParam
        # - $ref: Domains.yaml#/components/parameters/selectParam
        - $ref: Domains.yaml#/components/parameters/filterParam
        - $ref: Domains.yaml#/components/parameters/academicyearcode
      responses:
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/modulecataloguecontent'
        "204":
          description: No Content - Successful request but no response body. e.g requesting module filter by modulecode which doesn't exist.
        
        #Error
        #General Error Code, if none of the    others are applicable
        "400":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "401":
          description: A User authentication required or credentials unauthorised
        "403":
          description: "Forbidden; the authenticated user does not have the authorisation to access the resource."
        "404":
          description: In case two conflicting update requests are made, one of the request must return 409.
        #Two conflicting update requests are made, one of the request must return 409.
        "409":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "429":
          description: "Too Many Requests - Rate limiting applied due to number of requests."
        #An internal server error had occurred. This is an unpredictable error        
        "500":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "502":
          description: Bad Gateway
  /module/{academicyearcode}/{ModuleIdentifier}:
    get:
      tags:
        - ModuleCatalogue API
      summary: Module Delivery
      operationId: ModuleCatalogueById
      description: "Detail of the module for the selected module code and year"
      externalDocs:
        description: Find more info about interface design here
        url: "https://liveuclac.sharepoint.com/sites/ampteam/Shared%20Documents/Module%20Catalogue/Interface%20Specification.docx?web=1"
      parameters:
        - $ref: Domains.yaml#/components/parameters/academicyearcode
        - $ref: Domains.yaml#/components/parameters/ModuleIdentifier

      responses:
        "200":
          description: Get module delivery.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'Domains.yaml#/components/schemas/ModuleDelivery'
            application/xml:
              schema:
                type: array
                items:
                  $ref: 'Domains.yaml#/components/schemas/ModuleDelivery'
          
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'        
            Retry-After:
              $ref: '#/components/headers/Retry-After'
          links:
            nextpage:   #nextpage: # <---- arbitrary name for the link
              description: Link to get next page.
              operationId: nextpage
            # or
            # operationRef: '#/paths/Module/get'
              parameters:
                $skipParam: $request.query.$skip
                $limit: $request.query.$limit
        "204":
          description: No Content - Successful request but no response body. e.g requesting module filter by modulecode which doesn't exist.
        
        #Error
        #General Error Code, if none of the    others are applicable
        "400":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "401":
          description: A User authentication required or credentials unauthorised
        "403":
          description: "Forbidden; the authenticated user does not have the authorisation to access the resource."
        "404":
          description: In case two conflicting update requests are made, one of the request must return 409.
        #Two conflicting update requests are made, one of the request must return 409.
        "409":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "429":
          description: "Too Many Requests - Rate limiting applied due to number of requests."
        #An internal server error had occurred. This is an unpredictable error        
        "500":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "502":
          description: Bad Gateway
components:
  # -----------------------------------------------------
  # Common Header
  # (Referencing from Domain.yaml is not working )
  # -----------------------------------------------------
  headers:
    X-RateLimit-Limit:
      description: Request limit per time window
      schema:
        type: integer
        format: int32
      example: 100
      required: true
    X-RateLimit-Remaining:
      description: Remaining requests for the current time window
      schema:
        type: integer
        format: int32
      example: 94
      required: true
    X-RateLimit-Reset:
      description: Time to the current window ends, in seconds from the current time.
      schema:
        type: integer
        format: int32
      example: 1553528925
      required: true
    Retry-After:
      description: |
        When an application exceeds the rate limit for a given API endpoint, the API will return a 
        [HTTP 429 “Too Many Requests”](http://tools.ietf.org/html/rfc6585)  response code, 
        and this response header indicate the remaining time window before the rate limit resets, 
        in UTC  [epoch seconds](http://en.wikipedia.org/wiki/Unix_time)
      schema:
        type: integer
        format: int32
      required: false
      example: 1553528925
...