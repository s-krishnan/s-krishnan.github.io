---
openapi: 3.0.2
# Added by API Auto Mocking Plugin
servers:
  - description:  Production
    url: https://api.ucl.ac.uk/AcademicModule/v1
  # - description:  UAT
  #   url: https://api.ucl.ac.uk/
  # - description:   Performance Test
  #   url: http://api.ucl.ac.uk/
info:
  #description: This is a UCL enterprise api for module catalogue
  description: "# Introduction\nWelcome to the reference for the UCL Academic REST API!\
    \n<a href=\"http://en.wikipedia.org/wiki/REST_API\" target=\"_blank\">REST</a>\
    \ is a web-service protocol that lends itself to rapid development by using everyday\
    \ HTTP and JSON, XML technology.\n\nThe UCL Academic REST API provides a broad set of operations\
    \ and resources that:\n\n  * Enable Web integration from the website.\n\
    \  * Support self-service subscriber sign-ups and account management (future).\n  * Enable manipulation\
    \ of most objects in the Academic Object Model.\n\nWant to share your opinion on\
    \ how our API works for you? <a href=\"_self\"\
    \ target=\"_blank\">Tell us how you feel </a>about using our API and what we can\
    \ do to make it better.\n\n## Access to the API\n\n
    \ You can access the UCL Academic REST API via one of the following endpoints:\n\n| Environment\
    \              | Base URL for REST Endpoints |\n|-------------------------|-------------------------|\n\
    |Production | TBC   |\n|UAT    | TBC|\n\
    |Performance Test | TBC |\n\nThe Production endpoint\
    \ provides access to the live data. UAT tenants are a good place\
    \ to test code without affecting real-world data. If you would like UCL to provision\
    \ an UAT tenant for you, contact API service owner for assistance.\n\
    \n\n# API Changelog\nYou can find the <a\
    \ href=\"_self\"\
    \ target=\"_blank\">Changelog</a> of the API Reference in the API wiki page.\n\
    \n# Authentication\n\n Authentication detail \n\n# Requests and Responses\n\n## BDO IDs \nAs a general rule, pass\
    \ BDOid to select / update / delete single resource in academic REST APIs 
    \ \n\n## HTTP Request Body\n\nMost of the parameters\
    \ and data accompanying your requests will be contained in the body of the HTTP\
    \ request. \n\nThe UCL Academic REST API accepts JSON, XML in the HTTP request body. No other\
    \ data format (e.g., SOAP, RSS, TEXT) is supported.\n\n## Testing a Request\n\nUse a third party client, such\
    \ as [curl](https://curl.haxx.se \"curl\"), [Postman](https://www.getpostman.com\
    \ \"Postman\"), or [Advanced REST Client](https://advancedrestclient.com \"Advanced\
    \ REST Client\"), to test the UCL Academic REST API.\n\nYou can test the UCL Academic REST API\
    \ for any enviornment as long as you have sufficient access. If connecting to Production,\
    \ bear in mind that you are working with your live production data, not sample\
    \ data or test data.\n\n
    \ Timeout Limit\n\nIf a request does not complete within 120 seconds, the request\
    \ times out and API platform returns a Gateway Timeout error.\n\n## Response codes and errors\n\n\
    \ Response codes indicate success or failure of data processing. Status codes from the 2XX range indicate that request has been accepted. If the returned code is from the 4XX range then it reveals either problem with the request or unability to discover new data.\
    
    \ \n\n| Response Code              | Description|\n \
    \ |-------------------------|----|\n \
    \ |200                   | Invalid values / Bad Request  |\n \
    \ |400                   | Unauthorized. It is usally caused by using a wrong API key or do not using one at all.  |\n \
    \ |401                   | Too many requests (plase see Rate limits below)  |\n \
    \ |411                   | Bad request  |\n \
    \ |405                   | The request was successful  |\n \
    \ |500                   | Internal Server Error. Please contact API team  |\n \

    \ \n\n# API Rate Limits\n\nAPI platform enforces client-level, Rate limiting of the standard API is primarily on a \
    \ per-user basis — or more accurately described, per user access token. If a method allows for X requests per rate limit  \
    \ window, then it allows X requests per window per access token. \
    \ \n See below for more information.\n ##  HTTP Headers and Response Codes \n\
    \ Use the HTTP headers in order to understand where the application is at for a given rate limit, \
    \ on the method that was just utilized. \n \
    \ *	`x-rate-limit-limit:`  the rate limit ceiling for that given endpoint, indicates how many calls \
    \ your application may make per time window. This time window is currently 60 seconds for most the resources, \
    \ but for the most reliable code you should not assume this is the case - use the X-Rate-Limit-Reset header instead. \n \
    \ *   `x-rate-limit-remaining:`  the number of requests left for the current time window \n \
    \ *   `x-rate-limit-reset:`  the remaining window before the rate limit resets, in UTC \n \
    \ [epoch seconds](http://en.wikipedia.org/wiki/Unix_time) \n \
    \ When an application exceeds the rate limit for a given API endpoint, the API will return a  \
    \ [HTTP 429 “Too Many Requests”](http://tools.ietf.org/html/rfc6585)  response code, \ 
    \ and the following error will be returned in the response body \n \
    \ '{ \"errors\": [ { \"code\": 88, \"message\": \"Rate limit exceeded\" } ] }' \n \
    \ and the following response header \
    \ `Retry-After: `the remaining window before the rate limit resets, in UTC  [epoch seconds](http://en.wikipedia.org/wiki/Unix_time)
    \ \n\n ##  Concurrent Request Limits \n\n ### ModuleCatalogue API \
    \ \n Number of simultaneous request accepted by API from single clinet for the selected resource at any given time in ms. /
    \ \n\n| Tenant              | GET| PUT | DELETE | POST | \n \
    \ |-------------------------|----| ----| -------| -----| \n \
    \ |Drupal                   | 1  | N/A | N/A | N/A |\n \
    \ \n\n ##  Request Limits \n\n ### ModuleCatalogue API \
    \ \n Total number of request accepted by API from single clinet for the selected resource in 24 Hours. \
    \ \n\n| Tenant              | GET| PUT | DELETE | POST | \n \
    \ |-------------------------|----| ----| -------| -----| \n \
    \ |Drupal                   | 20,000  | N/A | N/A | N/A |\n \
    \ \n\n# Pagination\n\nWhen retrieving information (using\
    \ GET methods), the optional `$skip` and '$limit' query parameters sets the stating record and maximum number\
    \ of record to return in a response. The maximum is `10`; larger values are treated\
    \ as `10`. If this value is empty or invalid, '$skip' typically defaults to\
    \ `0` and '$limit' defaults to 10.\n\nThe default value for the maximum number of rows retrieved can be overridden\
    \ at the method level.\n\nIf more rows are available, the response will the following pagination detail\
    \ ### Pagination property in the main Body:
    \ \n\n    {
    \ \n        \"Modules\":{
    \ \n          \"Module\":[
    \ \n            {
    \ \n              \"ModuleIdentifier\": .......
    \ \n              ......................
    \ \n            }
    \ \n          ]
    \ \n        },
    \ \n        \"pagination\":[
    \ \n            {
    \ \n              \"pagination\": \"true\", 
    \ \n              \"count\": \"100\", 
    \ \n              \"offset\": \"10\", 
    \ \n              \"limit\": \"10\", 
    \ \n            }
    \ \n          ]
    \ \n       }
    \ \n\n

    \ \n\n## Array Size\n\nFor data items that are not paginated, the REST API\
    \ supports arrays of up to 50 rows. \
    \ \n\n# API Versions\n\nThe Academic REST \
    \ API are version controlled. Versioning ensures that UCL Academic REST API changes are\
    \ backward compatible. This API uses a major and minor version nomenclature to manage\
    \ changes. By specifying a version in a REST request, you can get expected responses\
    \ regardless of future changes to the API.\n\n## Major Version\n\nThe major version\
    \ number of the REST API appears in the REST URL. Currently, Academic API only supports\
    \ the **v1** major version. For example, `POST https://TBC/v1`.\n\
    \n## Minor Version\n\nAcademic API uses minor versions for the REST API to control small\
    \ changes. For example, a field in a REST method is deprecated and a new field\
    \ is used to replace it. \n\nSome fields in the REST methods are supported as\
    \ of minor versions. If a field is not noted with a minor version, this field\
    \ is available for all minor versions. If a field is noted with a minor version,\
    \ this field is in version control. You must specify the supported minor version\
    \ in the request header to process without an error. \n\nIf a field is in version\
    \ control, it is either with a minimum minor version or a maximum minor version,\
    \ or both of them. You can only use this field with the minor version between\
    \ the minimum and the maximum minor versions. \
    \ \n\nIf you specify a version number in the request header that is\
    \ not supported, API will use the minimum minor version of the REST API. In\
    \ our REST API documentation, if a field or feature requires a minor version number,\
    \ we note that in the field description.\n\nYou only need to specify the version\
    \ number when you use the fields require a minor version. To specify the minor\
    \ version, set the `minor-version` parameter to the minor version number in the\
    \ request header for the request call.\
    \ The `minor-version` parameter is case sensitive.\n\nFor all the REST API fields,\
    \ by default, if the minor version is not specified in the request header, API\
    \ will use the minimum minor version of the REST API to avoid breaking your integration.\
    \ \n\n### Minor Version History\n\nThe supported minor versions are not serial.\
    \ This section documents the changes made to each UCL Academic REST API minor version.\n\
    \nThe following table lists the supported versions and the fields that have a\
    \ UCL Academic REST API minor version.\n\n| Fields         | Minor Version      | REST\
    \ Methods    | Description |\n|:--------|:--------|:--------|:--------|\n | TBC\
    \ | TBC  | TBC|TBC|\
    \    \n\n\n# Academic Object Model\n\n### Module Catalogue Object Model\
    \ \n\nThe following diagram presents a high-level view of the Module Catalogue\
    \ objects. Click the image to open it in a new tab to resize it.\n\n<a href=\"\
    https://wiki.ucl.ac.uk/download/attachments/112330630/Target%20Solution%20-%20Information%20Architecture.png?version=2&modificationDate=1553012583000&api=v2\" target=\"_blank\"\
    ><img src=\"https://wiki.ucl.ac.uk/download/attachments/112330630/Target%20Solution%20-%20Information%20Architecture.png?version=2&modificationDate=1553012583000&api=v2\" alt=\"\
    Module Object Model Diagram\"></a>\n\nThe following table provides the API name of each Academic object:\n\
    \n| Object                                        | API Name                 \
    \                  |\n|-----------------------------------------------|--------------------------------------------|\n\
    \ | Academic Module                                       | `Module`                  |\n\
    \ |Academic Module Delivery                               | `ModuleDelivery`\
    \ \n"
  version: "8.0.20190424"
  title: UCL Academic API Reference
  x-logo:
    url: Images/isdi_logo_grey-trans-large.png  
  contact:
    name: saravanakumar krishnan
    email: saravanakumar.krishnan@ucl.ac.uk
  termsOfService: https://www.ucl.ac.uk/isd/services/software-hardware/help/software-policy-faqs
  license:
    name: UCLl API
    url: 'https://www.ucl.ac.uk/isd/services/software-hardware/help/software-policy-faqs'
externalDocs:
        description: Find more info about interface design here
        url: "https://liveuclac.sharepoint.com/sites/ampteam/Shared%20Documents/Module%20Catalogue/Interface%20Specification.docx?web=1"
tags:
  - name: Academic Module API
    description: Academic Module Catalogue API
  # 2) Apply the security globally to all operations
security:
  - oauth2: []         # use the same name as above
paths:
  #List of Module
  /Module:
    get:
      tags:
        - Academic Module API
      summary: /Module
      operationId: Module
      description: |
        Get the list of module(s) in UCL, response includes only module header information that doesn't 
        change based on academic years. 
        ```
        *[Module]
        ```
        [Pagination](#section/Pagination) pagination option is used in this endpoint.
      parameters:
        - $ref: Domains.yaml#/components/parameters/skipParam
        - $ref: Domains.yaml#/components/parameters/limitParam
        # - $ref: Domains.yaml#/components/parameters/selectParam
        - $ref: Domains.yaml#/components/parameters/filterParam
      responses:  &CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/modules_200_status'
        "204":
          description: No Content - Successful request but no response body. e.g requesting module filter by modulecode which doesn't exist.
        
        #Error
        #General Error Code, if none of the    others are applicable
        "400":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "401":
          description: A User authentication required or credentials unauthorised
        "403":
          description: "Forbidden; the authenticated user does not have the authorisation to access the resource."
        "404":
          description: In case two conflicting update requests are made, one of the request must return 409.
        #Two conflicting update requests are made, one of the request must return 409.
        "409":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "429":
          description: "Too Many Requests - Rate limiting applied due to number of requests."
        #An internal server error had occurred. This is an unpredictable error        
        "500":
          $ref: 'Domains.yaml#/components/responses/GeneralError'
        "502":
          description: Bad Gateway
  
  /Module/{ModuleIdentifier}:
    get:
      tags:
        - Academic Module API 
      summary: /Module/{ModuleIdentifier}
      operationId: ModuleById
      description: |
        Get single module in UCL by module unique identifier, response includes only module header information that doesn't 
        change based on academic years. 
        ```
        [Module]
        ```
      parameters:
        - $ref: Domains.yaml#/components/parameters/ModuleIdentifier
      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/module_200_status'

  /Module/{ModuleIdentifier}/ModuleInstance:
    get:  &ModuleInstances
      tags:
        - Academic Module API 
      summary: /Module/{ModuleIdentifier}/ModuleInstance
      operationId: ModuleInstanceFilterByModuelID
      description: |
        Get the list of module instances for given {moduleidentifier}  in UCL
        ```
        [Module] -(ModuleIdentifier)-> *[Module Instance]
        ```
        [Pagination](#section/Pagination) pagination option is used in this endpoint.
      parameters: 
        - $ref: Domains.yaml#/components/parameters/filterParam
        - $ref: Domains.yaml#/components/parameters/ModuleIdentifier
      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/moduleinstances_200_status'
      
  /Module/{ModuleIdentifier}/ModuleInstance/{AcademicYearCode}:
    get:
      tags:
        - Academic Module API 
      summary:  /Module/{ModuleIdentifier}/ModuleInstance/{AcademicYearCode}
      operationId: ModuleInstanceByModuleIDAndYear
      description: |
        Get single module instances for the given {moduleidentifier} and {academic year} in UCL
        ```
        [Module] -(ModuleIdentifier,Academicyear)-> [Module Instance]
        ```
      parameters:
        - $ref: Domains.yaml#/components/parameters/AcademicYearCode
        - $ref: Domains.yaml#/components/parameters/ModuleIdentifier
      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/moduleinstance_200_status'
        
  /Module/{ModuleIdentifier}/ModuleInstance/{AcademicYearCode}/ModuleDelivery:
    get:
      tags:
        - Academic Module API
      summary: /Module/{ModuleIdentifier}/ModuleInstance/{AcademicYearCode}/ModuleDelivery
      operationId: ModuleDeliveryByModuleIdAndYear
      description: |
        Get the list of module delivery for given {moduleidentifier} and {academic year} in UCL
        ```
        [Module] -(academicyear)-> *[Module Instance] -(academicyear, moduleidentifier)-> *[ModuleDelivery] -> *[ModuleDeliveryAssessment]
        ```
      parameters:
        - $ref: Domains.yaml#/components/parameters/AcademicYearCode
        - $ref: Domains.yaml#/components/parameters/ModuleIdentifier

      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/fullmoduledeliveries_200_status'
  
  /ModuleInstance:
    get:  &ModuleInstancesGetResponse
      tags:
        - Academic Module API
      summary: /ModuleInstance
      operationId: ModuleCatalogue
      description: |
        Get the all module instances in UCL, response include module instances in current year and all the past years.
        ```
        *[Module Instance (FullDetail)]
        ```
        [Pagination](#section/Pagination) pagination option is used in this endpoint.
      parameters:
        - $ref: Domains.yaml#/components/parameters/paginate
        - $ref: Domains.yaml#/components/parameters/skipParam
        - $ref: Domains.yaml#/components/parameters/limitParam
        # - $ref: Domains.yaml#/components/parameters/selectParam
        - $ref: Domains.yaml#/components/parameters/filterParam
      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/moduleinstancesfull_200_status'
  
  /ModuleInstance/{AcademicYearCode}: 
    get: 
      <<: *ModuleInstancesGetResponse
      # tags:
      #   - Academic Module API
      summary: /ModuleInstance/{AcademicYearCode}
      operationId: ModuleCatalogueFilterByYear
      description: |
        Get the list of module instances for the given {academic year} in UCL
        ```
        *[Module Instance (FullDetail)]
        ```
        [Pagination](#section/Pagination) pagination option is used in this endpoint.
      parameters:
        - $ref: Domains.yaml#/components/parameters/paginate
        - $ref: Domains.yaml#/components/parameters/skipParam
        - $ref: Domains.yaml#/components/parameters/limitParam
        # - $ref: Domains.yaml#/components/parameters/selectParam
        - $ref: Domains.yaml#/components/parameters/filterParam
      # responses:
      #   <<: *CommonResponse
      #   # Successfull request
      #   "200":
      #     $ref: 'Domains.yaml#/components/responses/moduleinstancefull_200_status'
  
  /ModuleDelivery:
    get:
      tags:
        - Academic Module API
      summary: /ModuleDelivery
      operationId: ModuleDeliveryById
      description: |
        Get the single module delivery by unqiue module delivery identifier in UCL
        ```
        *[ModuleDelivery] -> *[ModuleDeliveryAssessment]
        ```
      parameters:
      - $ref: Domains.yaml#/components/parameters/paginate
      - $ref: Domains.yaml#/components/parameters/skipParam
      - $ref: Domains.yaml#/components/parameters/limitParam
      # - $ref: Domains.yaml#/components/parameters/selectParam
      - $ref: Domains.yaml#/components/parameters/filterParam
      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/moduledeliveries_200_status'

  /ModuleDelivery/{ModuleDeliveryIdentifier}:
    get:
      tags:
        - Academic Module API
      summary: /ModuleDelivery/{ModuleDeliveryIdentifier}
      operationId: ModuleDeliveryById
      description: |
        Get the single module delivery by unqiue module delivery identifier in UCL
        ```
        [ModuleDelivery] -> *[ModuleDeliveryAssessment]
        ```
      parameters:
        - $ref: Domains.yaml#/components/parameters/ModuleDeliveryIdentifier

      responses:
        <<: *CommonResponse
        # Successfull request
        "200":
          $ref: 'Domains.yaml#/components/responses/moduledelivery_200_status'

components:
   # 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    oauth2:            # arbitrary name for the security scheme
      type: oauth2
      description:  |
        [OAuth 2 (Open Authorization)](https://tools.ietf.org/html/rfc6749) is an open standard for access delegation. It is used for token-based authentication and authorization. 
        This standard is used by many technology providers, such as Google, Facebook, and Twitter. By using OAuth 2, it is possible to grant access to a secured resource (with an access token) for a specific period of time. Once the lifetime of that access token expires, the consumer has to refresh the token to obtain a new token.

        <img src="http://www.websequencediagrams.com/cgi-bin/cdraw?lz=CiAgICBVc2VyLT5DbGllbnQ6IEdFVCAvcGVlawpwYXJ0aWNpcGFudCBBdXRoU2VydmVyCgphY3RpdmF0ZQA0BQAECgA7BgoKAEMGLT5Vc2VyOiAzMDI6IGxvY2F0aW9uPWF1dGgvYXV0aG9yaXplCmRlAD4OAAULAEYIAIEXBgB1CgCBGgcAOgoAdxcAgSYLAIEyCgCBDQh7bWVzc2FnZXM6ICJEbyB5b3UgYXBwcm92ZT8ifQB6HACBewwAgQgSAD0HAF41AIIaDmMAgwgFL2hhbmRsZV9jb2RlP2NvZGU9ZGtzaGZqZwB1LgCDTQ0AOhkAgy8nAIJ-DFBPU1Q6IC90b2tlbgA2FwCCcBcAhGUIMjAwOiB7YWNjZXNzXwBDBTpDTk1CVkNYS1ZZAIJ9DQCEdQwAhFoIUmVzb3VyY2UAhA0NcgAOBygASgwpAIUrCgAnDgoANg4AgQsPcmVzcG9ucwCFHA0AMQ8AhWAPAC8IdWx0AIU7EwCFYBA" alt="OAuth2 Flow">


        After [subscribing to an API](http://usermanual-not-exist) using self service portal in the api platform, consumers need to generate an access token to invoke the API. This is an OAuth2 access token. The validity period of this access token can be specified when generating it.

        Authenticating via OAuth requires the following steps:
        1. Create a Client
        2. Generate a Token
        3. Make Authenticated Requests
        
        ### Create a Client
        You must first register your applicaion using slef service API platform, contact API platform team for more detail. This is a one-time operation. You will be provided with a Client ID and a Client Secret key. Please note this information down, as it will be required for the next step.
        
        **Note:** The OAuth client will be owned by a user account used to login to create client id in first place. If you want to perform PUT, POST, or DELETE operations using the OAuth client, the owner of the OAuth client must have a Platform role that includes the "API Write Access" permission.
        
        ### Generate a Token
        To obtain a token, an app sends the client ID and client secret associated with it to token api. If these parameters (i.e. client ID and client secret) are valid, an access token will be returned back. 

        Token api requires the following parameters:
        - `client_id` - obtain from the previous step
        - `client_secret` - obtain from the previous step
        - `grant_type` - must be set to `client_credentials`
        
        For example, the following cURL command can be used to access the Token API.
        
               curl -k -d "grant_type=client_credentials" -H "Authorization: Basic cEJ6dUlaaEdwaGZRbWRjVVgwbG5lRmlpdXh3YTo0U0pnV19qTU56aGpIU284OGJuZVhtTnFNMjRh" -H "Content-Type: application/x-www-form-urlencoded" https://localhost:8243/token -v
        
        NOTE: Combine the consumer key and consumer secret keys in the format consumer-key:consumer-secret and encode the combined string using [base64](http://base64encode.org).

        You receive a response similar to the following:
        
              {
                "access_token":"4c27f899-6f9c-3217-b974-3ceb5a409ac3",
                "scope":"am_application_scope default",
                "token_type":"Bearer",
                "expires_in":723
              }
        

        ### Make Authenticated Requests
        Every API requests must include a valid authentication token in an HTTP header:
        `Authorization: Bearer {bearer_token}`

        ### Refresh Token
        An access token is issued with a limited lifetime, An hour most of the time. Therefore, when the lifetime is over, the token will expire. Afterward, users/client apps need a new token to consume the secured services. This can be addressed using token api with the following parameters.

        - `client_id` - obtain from the previous step
        - `client_secret` - obtain from the previous step
        - `grant_type` - must be set to `refresh_token`
        - 'refresh_token' - retoken obtain from the previous access token api call

        For example, the following cURL command can be used to refresh the token.
        
              curl -k -d "grant_type=refresh_token&refresh_token=<retoken>" -H "Authorization: Basic SVpzSWk2SERiQjVlOFZLZFpBblVpX2ZaM2Y4YTpHbTBiSjZvV1Y4ZkM1T1FMTGxDNmpzbEFDVzhh" -H "Content-Type: application/x-www-form-urlencoded" https://localhost:8243/token
         
        NOTE: Combine the consumer key and consumer secret keys in the format consumer-key:consumer-secret and encode the combined string using [base64](http://base64encode.org).
        
        You receive a response similar to the following:
        
              {
                  "scope":"default",
                  "token_type":"Bearer",
                  "expires_in":3600,
                  "refresh_token":"7ed6bae2b1d36c041787e8c8e2d6cbf8",
                  "access_token":"b7882d23f1f8257f4bc6cf4a20633ab1"
              }
        

      flows:
        clientCredentials:
          tokenUrl: https://tbc/token
          refreshUrl: https://tbc/token
          scopes:
            read-AcademicModule: read academic modules 
        
...